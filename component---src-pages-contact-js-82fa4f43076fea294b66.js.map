{"version":3,"sources":["webpack:///./src/pages/contact.js","webpack:///./src/components/seo.js"],"names":["MainImage","Object","_emotion_styled_base__WEBPACK_IMPORTED_MODULE_1__","Img","target","name","styles","query","ContactList","color","link","IndexPage","props","_emotion_core__WEBPACK_IMPORTED_MODULE_2__","_components_seo__WEBPACK_IMPORTED_MODULE_4__","title","href","SEO","_ref","description","lang","meta","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_1__","data","metaDescription","siteMetadata","_emotion_core__WEBPACK_IMPORTED_MODULE_0__","react_helmet__WEBPACK_IMPORTED_MODULE_4___default","a","htmlAttributes","titleTemplate","content","property","author","concat","defaultProps","propTypes","PropTypes","string","arrayOf","object","isRequired"],"mappings":"+OAOaA,EAAYC,OAAAC,EAAA,EAAAD,CAAOE,IAAP,CAAAC,OAAA,aAAAH,CAAH,CAAAI,KAAA,SAAAC,OAAA,mCAKTC,EAAK,YAaZC,EAAcP,OAAAC,EAAA,EAAAD,CAAA,MAAHG,OAAA,aAAGH,CAAH,2BAGJQ,IAAMC,KAHF,KAwBFC,UAjBG,SAACC,GAAD,OAChBX,OAAAY,EAAA,EAAAZ,CAAA,WACEA,OAAAY,EAAA,EAAAZ,CAACa,EAAA,EAAD,CAAKC,MAAM,SACXd,OAAAY,EAAA,EAAAZ,CAAA,wBACAA,OAAAY,EAAA,EAAAZ,CAAA,0DAGAA,OAAAY,EAAA,EAAAZ,CAACO,EAAD,KACEP,OAAAY,EAAA,EAAAZ,CAAA,4BAAmBA,OAAAY,EAAA,EAAAZ,CAAA,KAAGe,KAAK,8BAAR,uBAAnB,gBACAf,OAAAY,EAAA,EAAAZ,CAAA,oBAAWA,OAAAY,EAAA,EAAAZ,CAAA,KAAGe,KAAK,8BAAR,oBACXf,OAAAY,EAAA,EAAAZ,CAAA,uBAAcA,OAAAY,EAAA,EAAAZ,CAAA,KAAGe,KAAK,4CAAR,oBACdf,OAAAY,EAAA,EAAAZ,CAAA,sBAAaA,OAAAY,EAAA,EAAAZ,CAAA,KAAGe,KAAK,uCAAR,qBACbf,OAAAY,EAAA,EAAAZ,CAAA,mBAAUA,OAAAY,EAAA,EAAAZ,CAAA,KAAGe,KAAK,iCAAR,gHChChB,SAASC,EAATC,GAAiD,IAAlCC,EAAkCD,EAAlCC,YAAaC,EAAqBF,EAArBE,KAAMC,EAAeH,EAAfG,KAAMN,EAASG,EAATH,MAC9BO,EADuCC,EAAAC,KACvCF,KAcFG,EAAkBN,GAAeG,EAAKI,aAAaP,YAEzD,OACElB,OAAA0B,EAAA,EAAA1B,CAAC2B,EAAAC,EAAD,CACEC,eAAgB,CACdV,QAEFL,MAAOA,EACPgB,cAAa,QAAUT,EAAKI,aAAaX,MACzCM,KAAM,CACJ,CACEhB,KAAI,cACJ2B,QAASP,GAEX,CACEQ,SAAQ,WACRD,QAASjB,GAEX,CACEkB,SAAQ,iBACRD,QAASP,GAEX,CACEQ,SAAQ,UACRD,QAAO,WAET,CACE3B,KAAI,eACJ2B,QAAO,WAET,CACE3B,KAAI,kBACJ2B,QAASV,EAAKI,aAAaQ,QAE7B,CACE7B,KAAI,gBACJ2B,QAASjB,GAEX,CACEV,KAAI,sBACJ2B,QAASP,IAEXU,OAAOd,KAKfJ,EAAImB,aAAe,CACjBhB,KAAI,KACJC,KAAM,GACNF,YAAW,IAGbF,EAAIoB,UAAY,CACdlB,YAAamB,IAAUC,OACvBnB,KAAMkB,IAAUC,OAChBlB,KAAMiB,IAAUE,QAAQF,IAAUG,QAClC1B,MAAOuB,IAAUC,OAAOG,YAGXzB","file":"component---src-pages-contact-js-82fa4f43076fea294b66.js","sourcesContent":["import React from \"react\"\nimport SEO from \"../components/seo\"\nimport styled from \"@emotion/styled\"\nimport Img from 'gatsby-image'\nimport { graphql } from \"gatsby\"\nimport color from \"../components/color\"\n\nexport const MainImage = styled(Img)`\n  max-height: 50vh;\n  margin: 0 auto;\n`\n\nexport const query = graphql`\n    query {\n        mainBg: file(relativePath: { eq: \"mainbg.png\" }) {\n            childImageSharp {\n                fluid(maxWidth: 800) {\n                    ...GatsbyImageSharpFluid\n                }\n            }\n        }\n    }\n`\n\n\nconst ContactList = styled.ol`\n  text-align: left;\n  a {\n    color: ${color.link}\n  }\n`\n\nconst IndexPage = (props) => (\n  <div>\n    <SEO title=\"Home\" />\n    <h2>Contacts: </h2>\n    <p>\n      I can be contacted via the following methods:\n    </p>\n    <ContactList>\n      <li>Email Address: <a href=\"mailto:hourai@etealune.net\">hourai@etealune.net</a> (preferred)</li>\n      <li>Skype: <a href=\"skype:hourai.etealune?chat\">Hourai.Etealune</a></li>\n      <li>Facebook: <a href=\"https://www.facebook.com/Hourai.Etealune\">Hourai.Etealune</a></li>\n      <li>Twitter: <a href=\"https://twitter.com/Hourai_Etealune\">@Hourai_Etealune</a></li>\n      <li>Line: <a href=\"http://line.me/ti/p/~etealune\">@Etealune</a></li>\n    </ContactList>\n  </div>\n)\n\nexport default IndexPage\n","/**\r\n * SEO component that queries for data with\r\n *  Gatsby's useStaticQuery React hook\r\n *\r\n * See: https://www.gatsbyjs.org/docs/use-static-query/\r\n */\r\n\r\nimport React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport Helmet from \"react-helmet\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\n\r\nfunction SEO({ description, lang, meta, title }) {\r\n  const { site } = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n            description\r\n            author\r\n          }\r\n        }\r\n      }\r\n    `\r\n  )\r\n\r\n  const metaDescription = description || site.siteMetadata.description\r\n\r\n  return (\r\n    <Helmet\r\n      htmlAttributes={{\r\n        lang,\r\n      }}\r\n      title={title}\r\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\r\n      meta={[\r\n        {\r\n          name: `description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          property: `og:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          property: `og:description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          property: `og:type`,\r\n          content: `website`,\r\n        },\r\n        {\r\n          name: `twitter:card`,\r\n          content: `summary`,\r\n        },\r\n        {\r\n          name: `twitter:creator`,\r\n          content: site.siteMetadata.author,\r\n        },\r\n        {\r\n          name: `twitter:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          name: `twitter:description`,\r\n          content: metaDescription,\r\n        },\r\n      ].concat(meta)}\r\n    />\r\n  )\r\n}\r\n\r\nSEO.defaultProps = {\r\n  lang: `en`,\r\n  meta: [],\r\n  description: ``,\r\n}\r\n\r\nSEO.propTypes = {\r\n  description: PropTypes.string,\r\n  lang: PropTypes.string,\r\n  meta: PropTypes.arrayOf(PropTypes.object),\r\n  title: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default SEO\r\n"],"sourceRoot":""}